# Needed Camus properties, more cleanup to come

# final top-level data output directory, sub-directory will be dynamically created for each topic pulled
etl.destination.path=/tmp/camutest/topics
# HDFS location where you want to keep execution files, i.e. offsets, error logs, and count files
etl.execution.base.path=/tmp/camutest/execution
# where completed Camus job output directories are kept, usually a sub-dir in the base.path
etl.execution.history.path=/tmp/camutest/output
#Filesystem for the above folders. This can be a hdfs:// or s3:// address.
fs.defaultFS=hdfs://nameservice1

# Concrete implementation of the Decoder class to use
camus.message.decoder.class=com.linkedin.camus.etl.kafka.coders.KafkaAvroMessageDecoder

#Concrete implementation of the Encoder class to use (used by Kafka Audit, and thus optional for now)
#camus.message.encoder.class=com.linkedin.batch.etl.kafka.coders.DummyKafkaMessageEncoder


# Used by avro-based Decoders to use as their Schema Registry
kafka.message.coder.schema.registry.class=com.linkedin.camus.schemaregistry.AvroRestSchemaRegistry

### AVRO REPOSITORY ###
etl.schema.registry.url=http://hadoop8:2876/schema-repo/

# Used by the committer to arrange .avro files into a partitioned scheme. This will be the default partitioner for all
# topics that do not have a partitioner specified
#etl.partitioner.class=com.linkedin.camus.etl.kafka.coders.DefaultPartitioner

# Partitioners can also be set on a per-topic basis
#etl.partitioner.class.<topic-name>=com.your.custom.CustomPartitioner

# all files in this dir will be added to the distributed cache and placed on the classpath for hadoop tasks
# hdfs.default.classpath.dir=

# max hadoop tasks to use, each task can pull multiple topic partitions
mapred.map.tasks=30
# max historical time that will be pulled from each partition based on event timestamp
kafka.max.pull.hrs=24
# events with a timestamp older than this will be discarded.
kafka.max.historical.days=7
# Max minutes for each mapper to pull messages (-1 means no limit)
kafka.max.pull.minutes.per.task=-1

# if whitelist has values, only whitelisted topic are pulled.  nothing on the blacklist is pulled
kafka.whitelist.topics=dev_vsw.avrodto.addelivery.activitylogging.pageview
kafka.blacklist.topics=
log4j.configuration=true

#Stops the mapper from getting inundated with Decoder exceptions for the same topic
#Default value is set to 10
max.decoder.exceptions.to.print=5

#Controls the submitting of counts to Kafka
#Default value set to true
post.tracking.counts.to.kafka=true
monitoring.event.class=class.that.generates.record.to.submit.counts.to.kafka

etl.run.tracking.post=false
kafka.monitor.tier=
etl.counts.path=
kafka.monitor.time.granularity=10
etl.hourly=hourly
etl.daily=daily
etl.ignore.schema.errors=false

# configure output compression for deflate or snappy. Defaults to deflate
etl.output.codec=deflate
etl.deflate.level=6
#etl.output.codec=snappy
etl.default.timezone=America/Los_Angeles
etl.output.file.time.partition.mins=60
etl.keep.count.files=false
etl.execution.history.max.of.quota=.8

mapred.output.compress=true
mapred.map.max.attempts=1

#Class for writing records to HDFS/S3
#etl.output.record.delimiter

### KAFKA SETTINGS ###
# Name of the client as seen by kafka
kafka.client.name=camus
# Fetch Request Parameters
#kafka.fetch.buffer.size=
#kafka.fetch.request.correlationid=
#kafka.fetch.request.max.wait=
#kafka.fetch.request.min.bytes=
# Connection parameters.
kafka.brokers=hadoop7:9092
#kafka.timeout.value=6000
kafka.client.buffer.size=20971520
kafka.client.so.timeout=60000

### ZOOKEEPER SETTINGS ###
### Kafka-0.8 handles all zookeeper calls
zookeeper.hosts=hadoop1
zookeeper.broker.topics=/brokers/topics
zookeeper.broker.nodes=/brokers/ids
#zookeeper.session.timeout=
#zookeeper.connection.timeout=


#These topics will be moved to the latest offset. You can specify the topic name or "all" as needed
#kafka.move.to.last.offset.list=